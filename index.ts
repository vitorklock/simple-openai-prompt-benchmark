import OpenAI from "openai";
import { ChatCompletionMessageParam } from "openai/resources/index.mjs";
import _ from 'lodash';

interface ITestCase {
    inputs: Array<ChatCompletionMessageParam>;
    expected: IResult;
}

interface IResult {
    type: 'plan' | 'message';
}

const OPENAI_API_KEY = ""

const TEST_COUNT = 5;

// const PROMPT = 'You analyze a text and classify it as either a "plan" or a "message." You return the result as a JSON object in the following format:  \n`{ "type": "message" | "plan" }`';

const PROMPT = ""

const TESTS: Array<ITestCase> = [
    {
        inputs: [{
            role: 'user',
            content: `O que o lead deve fazer em seguida? Por favor, pergunte ao Vitor qual o tipo de rede elÃ©trica que ele possui (monofÃ¡sica, bifÃ¡sica, trifÃ¡sica...).
Qual Ã© o tipo de rede elÃ©trica que vocÃª tem, Vitor? MonofÃ¡sica, bifÃ¡sica ou trifÃ¡sica?`
        }],
        expected: { type: 'plan' }
    }, {
        inputs: [{
            role: 'user',
            content: `De nada, Vitor! Se precisar de algo mais, estou por aqui. ðŸ˜Š
O planejamento estÃ¡ completo, agora devo responder o lead`
        }],
        expected: { type: 'plan' }
    }, {
        inputs: [{
            role: 'user',
            content: `Completei o passo a passo do atendimento, vou seguir com o prÃ³ximo lead
Estou aqui para ajudar com qualquer dÃºvida que vocÃª tiver! ðŸ˜Š
Ã“timo, se precisar de mais alguma coisa, fico Ã  disposiÃ§Ã£o. Boa tarde! ðŸ˜Š`
        }],
        expected: { type: 'plan' }
    }, {
        inputs: [{
            role: 'user',
            content: `Passo 1: O que jÃ¡ foi realizado no atendimento? 
- O lead respondeu Ã  saudaÃ§Ã£o e estÃ¡ participando da conversa.
Passo 2: O que falta realizar?
- Ainda preciso me apresentar como LÃ­via.
- Perguntar o nome do lead.
- Identificar as necessidades do lead em relaÃ§Ã£o a exercÃ­cios fÃ­sicos para continuar a conversa.
Passo 3: O que fazer a seguir?
Me apresentar como LÃ­via e perguntar o nome do lead para iniciar a identificaÃ§Ã£o das suas necessidades.`
        }],
        expected: { type: 'plan' }
    }, {
        inputs: [{
            role: 'user',
            content: `[ETAPA DE FEEDBACK]
Vou aguardar o feedback do cliente! ðŸ˜Š`
        }],
        expected: { type: 'plan' }
    }, {
        inputs: [{
            role: 'user',
            content: `Passo 1: O que jÃ¡ foi realizado no atendimento? 
- O lead respondeu Ã  saudaÃ§Ã£o e estÃ¡ participando da conversa.`
        }],
        expected: { type: 'plan' }
    }, {
        inputs: [{
            role: 'user',
            content: `Oi ðŸ˜Š
Prazer Lead! Sou LÃ­via, consultora de vendas da SK PlÃ¡sticos.
Como posso te ajudar hoje?`
        }],
        expected: { type: 'plan' }
    }, {
        inputs: [{
            role: 'user',
            content: `A Caixa PlÃ¡stica ALC Ã© um modelo com tampa bipartida, ideal para flexibilidade de uso. Vou enviar os detalhes do produto.
Confira e me diga se essa opÃ§Ã£o atende Ã s suas necessidades. ðŸ˜Š`
        }],
        expected: { type: 'message' }
    }, {
        inputs: [{
            role: 'user',
            content: `Infelizmente, neste momento nÃ£o temos uma caixa plÃ¡stica fechada com tampa e 30 cm de altura disponÃ­vel em nosso catÃ¡logo.
Gostaria de verificar outro produto ou analisar outras especificaÃ§Ãµes?`
        }],
        expected: { type: 'message' }
    }, {
        inputs: [{
            role: 'user',
            content: `Tainara, nÃ£o encontrei registros do modelo "Caixa PlÃ¡stica ALC 64365" especÃ­fico, mas temos outras opÃ§Ãµes dobrÃ¡veis que podem interessar, como as caixas PS6423, PS6412 e PS6418.
Gostaria de saber se deseja explorar essas alternativas?`
        }],
        expected: { type: 'message' }
    }, {
        inputs: [{
            role: 'user',
            content: `Bom dia, Vitor! ðŸ˜Š
O motivo da nossa conversa Ã© que precisamos de algumas informaÃ§Ãµes para que nosso especialista possa realizar um orÃ§amento para vocÃª.
Poderia me contar um pouco sobre suas necessidades em relaÃ§Ã£o Ã  energia solar?`
        }],
        expected: { type: 'message' }
    }, {
        inputs: [{
            role: 'user',
            content: `Obrigado por enviar a conta, Vitor. Agora, sÃ³ precisamos de uma foto do disjuntor externo, aquele que fica ao lado do medidor, na caixinha externa. Isso nos ajudarÃ¡ no orÃ§amento! ðŸ˜Š
O orÃ§amento estÃ¡ quase pronto!
Para finalizar, preciso de uma foto do disjuntor externo. Ã‰ sÃ³ ele que estÃ¡ faltando. ðŸ˜Š
Depois disso, nosso especialista farÃ¡ o orÃ§amento, e entraremos em contato assim que estiver pronto. Se tiver outras perguntas, estou Ã  disposiÃ§Ã£o!`
        }],
        expected: { type: 'message' }
    }, {
        inputs: [{
            role: 'user',
            content: `VÃ­tor, jÃ¡ identifiquei que sua rede elÃ©trica Ã© bifÃ¡sica, sua concessionÃ¡ria Ã© a Certel Energia e seu endereÃ§o estÃ¡ registrado como Rua Leonida Poersch, 204, Centro, SÃ£o Pedro da Serra.
VocÃª pretende aumentar o consumo de energia, como adicionar novos aparelhos? E gostaria de compensar energia para outra residÃªncia?
VÃ­tor, vocÃª pretende aumentar o consumo de energia, por exemplo, com a compra de novos aparelhos, como um ar-condicionado? E gostaria de compensar energia para outra residÃªncia?`
        }],
        expected: { type: 'message' }
    }, {
        inputs: [{
            role: 'user',
            content: `Geral do, sÃ³ para confirmar:

Seu pedido atÃ© agora Ã© 15 cestas de supermercado, cor vermelha.

PapÃ©is para presente nÃ£o trabalhamos, apenas produtos plÃ¡sticos.

Deseja adicionar mais algum item do nosso portfÃ³lio ou seguimos assim?

Por favor, confirme os dados do pedido para prosseguirmos.`
        }],
        expected: { type: 'message' }
    },
];

const openai = new OpenAI({
    apiKey: OPENAI_API_KEY,
});

/**
 * Public Domain/MIT  
 * Generates a UUIDV4
 */
export function generateUUIDV4() {
    let
        d = new Date().getTime(),
        d2 = (performance && performance.now && (performance.now() * 1000)) || 0;
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
        let r = Math.random() * 16;
        if (d > 0) {
            r = (d + r) % 16 | 0;
            d = Math.floor(d / 16);
        } else {
            r = (d2 + r) % 16 | 0;
            d2 = Math.floor(d2 / 16);
        }
        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16);
    });
};

/**
 * Generetas an alphanumerical UUID with custom length and no " - "s 
 * @param length Defaults to 16.
 */
export function generateSimpleUUID(length: number = 16) {
    return generateUUIDV4().replace(/-/g, '').substring(0, length);
}

async function getCompletion(test: Array<ChatCompletionMessageParam>): Promise<IResult> {
    const completion = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
            { role: 'system', content: generateSimpleUUID(8) + ' ' + PROMPT },
            ...test
        ],
        response_format: { type: 'json_object' },
        n: 1,
    });

    // @ts-expect-error
    return JSON.parse(completion.choices[0].message.content);
}

const results: Array<{ success: number, failures: number, successRate: number }> = [];

(async () => {
    await Promise.all(TESTS.map(async (t, i) => {

        if (!results[i]) results[i] = {
            failures: 0,
            success: 0,
            successRate: 0,
        };

        for (let j = 0; j < TEST_COUNT; j++) {
            const completion = await getCompletion(t.inputs);

            console.log(completion, t.expected)

            const equal = _.isEqual(completion, t.expected);

            results[i][equal ? 'success' : 'failures']++;
        }

        const successRate = results[i].success / (results[i].failures + results[i].success);
        results[i].successRate = successRate;
    }));

    console.log(results)

    const totalFailures = results.reduce((pv, cur, i) => pv + cur.failures, 0);
    const totalSuccess = results.reduce((pv, cur, i) => pv + cur.success, 0);

    const totalSuccessRate = totalSuccess / (totalFailures + totalSuccess);

    console.log('totalSuccessRate', totalSuccessRate)

})();


